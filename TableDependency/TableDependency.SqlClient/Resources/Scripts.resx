<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateProcedureQueueActivation" xml:space="preserve">
    <value>CREATE PROCEDURE {2}.[{0}_QueueActivation] AS 
BEGIN 
	SET NOCOUNT ON;
	BEGIN TRANSACTION

	IF EXISTS (SELECT * FROM sys.service_queues WITH(NOLOCK) WHERE name = N'{0}')
	BEGIN
		IF ((SELECT COUNT(*) FROM dbo.[{0}] WITH(NOLOCK) WHERE message_type_name = N'http://schemas.microsoft.com/SQL/ServiceBroker/DialogTimer') &gt; 0)
		BEGIN 
			{1}
		END 
	END
	COMMIT TRANSACTION
END</value>
  </data>
  <data name="CreateTrigger" xml:space="preserve">
    <value>CREATE TRIGGER [tr_{0}] ON {1} AFTER {13} AS 
BEGIN
	SET NOCOUNT ON;

	DECLARE @rowsToProcess INT
	DECLARE @currentRow INT
	DECLARE @h AS UNIQUEIDENTIFIER
	DECLARE @records XML
	DECLARE @theMessageContainer NVARCHAR(MAX)
	DECLARE @dmlType NVARCHAR(10)
	DECLARE @modifiedRecordsTable TABLE ([RowNumber] INT IDENTITY(1, 1), {2})
	{5}
	
	IF NOT EXISTS(SELECT * FROM INSERTED)
	BEGIN
		SET @dmlType = '{12}'
		INSERT INTO @modifiedRecordsTable SELECT {3} FROM DELETED
	END
	ELSE
	BEGIN
		IF NOT EXISTS(SELECT * FROM DELETED)
		BEGIN
			SET @dmlType = '{10}'
			INSERT INTO @modifiedRecordsTable SELECT {3} FROM INSERTED
		END
		ELSE
		BEGIN
			{4}
		END
	END

	SELECT @rowsToProcess = COUNT(*) FROM @modifiedRecordsTable
	IF @rowsToProcess &lt; 1 RETURN
	SET @currentRow = 0

	BEGIN TRY
		BEGIN TRANSACTION

		WHILE @currentRow &lt; @rowsToProcess
		BEGIN
			SET @currentRow = @currentRow + 1

			SELECT	{6}
			FROM	@modifiedRecordsTable
			WHERE	[RowNumber] = @currentRow
				
			IF @dmlType = '{10}' 
			BEGIN
				BEGIN DIALOG CONVERSATION @h
				FROM SERVICE [{0}] TO SERVICE '{0}', 'CURRENT DATABASE' ON CONTRACT [{0}]
				WITH RELATED_CONVERSATION_GROUP = NEWID(), ENCRYPTION = OFF;

				{7}

				IF EXISTS(select * from sys.conversation_endpoints where conversation_handle = @h and lower(state) = 'er')
				BEGIN
					RAISERROR ('An error has occurred on the conversation endpoints', 18, 127)
				END

				IF EXISTS(select * from sys.conversation_endpoints where conversation_handle = @h and lower(state) = 'cd')
				BEGIN
					RAISERROR ('This conversation endpoints is no longer in use.', 18, 127)
				END
				
				END CONVERSATION @h;
			END
		
			IF @dmlType = '{11}'
			BEGIN
				BEGIN DIALOG CONVERSATION @h
				FROM SERVICE [{0}] TO SERVICE '{0}', 'CURRENT DATABASE' ON CONTRACT [{0}]
				WITH RELATED_CONVERSATION_GROUP = NEWID(), ENCRYPTION = OFF;

				{8}

				IF EXISTS(select * from sys.conversation_endpoints where conversation_handle = @h and lower(state) = 'er')
				BEGIN
					RAISERROR ('An error has occurred on the conversation endpoints', 18, 127)
				END

				IF EXISTS(select * from sys.conversation_endpoints where conversation_handle = @h and lower(state) = 'cd')
				BEGIN
					RAISERROR ('This conversation endpoints is no longer in use.', 18, 127)
				END
				
				END CONVERSATION @h;
			END

			IF @dmlType = '{12}'
			BEGIN
				BEGIN DIALOG CONVERSATION @h
				FROM SERVICE [{0}] TO SERVICE '{0}', 'CURRENT DATABASE' ON CONTRACT [{0}]
				WITH RELATED_CONVERSATION_GROUP = NEWID(), ENCRYPTION = OFF;

				{9}

				IF EXISTS(select * from sys.conversation_endpoints where conversation_handle = @h and lower(state) = 'er')
				BEGIN
					RAISERROR ('An error has occurred on the conversation endpoints', 18, 127)
				END

				IF EXISTS(select * from sys.conversation_endpoints where conversation_handle = @h and lower(state) = 'cd')
				BEGIN
					RAISERROR ('This conversation endpoints is no longer in use.', 18, 127)
				END
				
				END CONVERSATION @h;
			END
		END

		IF @@TRANCOUNT &gt; 0 COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		DECLARE @ErrorMessage NVARCHAR(4000)
		DECLARE @ErrorSeverity INT
    	DECLARE @ErrorState INT

		SELECT @ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE()

		IF @@TRANCOUNT &gt; 0 ROLLBACK TRANSACTION

		RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState)
	END CATCH
END</value>
  </data>
  <data name="ScriptDropAll" xml:space="preserve">
    <value>DECLARE @schema_id INT
DECLARE @conversation_handle UNIQUEIDENTIFIER
DECLARE @rows INT

SET @rows = 1;
SELECT @schema_id = schema_id FROM sys.schemas WHERE name = N'{2}';

IF EXISTS (SELECT * FROM sys.service_queues WITH(NOLOCK) WHERE schema_id = @schema_id AND name = N'{0}') EXEC (N'ALTER QUEUE {2}.[{0}] WITH ACTIVATION (STATUS = OFF)');

WHILE (@rows &gt; 0)
BEGIN
	SELECT TOP 1 @conversation_handle = conversation_handle FROM sys.conversation_endpoints WITH(NOLOCK) WHERE far_service = N'{0}';
	SET @rows = @@ROWCOUNT;
	IF (@rows &gt; 0)
	BEGIN
		END CONVERSATION @conversation_handle WITH CLEANUP;
	END
END

IF EXISTS (SELECT * FROM sys.objects WHERE schema_id = @schema_id AND name = N'tr_{0}') DROP TRIGGER {2}.[tr_{0}];
IF EXISTS (SELECT * FROM sys.services WHERE name = N'{0}') DROP SERVICE [{0}];
IF EXISTS (SELECT * FROM sys.service_queues WHERE schema_id = @schema_id AND name = N'{0}') DROP QUEUE {2}.[{0}];
IF EXISTS (SELECT * FROM sys.service_contracts WHERE name = N'{0}') DROP CONTRACT [{0}];
{1}
IF EXISTS (SELECT * FROM sys.objects WHERE schema_id = @schema_id AND name = N'{0}_QueueActivation') DROP PROCEDURE {2}.[{0}_QueueActivation];</value>
  </data>
  <data name="TriggerUpdateWithColumns" xml:space="preserve">
    <value>IF ({0}) BEGIN
    SET @dmlType = '{3}'
    INSERT INTO @modifiedRecordsTable SELECT {2} FROM INSERTED
    {4}
END
ELSE BEGIN
    RETURN
END</value>
  </data>
  <data name="TriggerUpdateWithoutColumns" xml:space="preserve">
    <value>SET @dmlType = '{2}'
INSERT INTO @modifiedRecordsTable SELECT {1} FROM INSERTED
{3}</value>
  </data>
</root>