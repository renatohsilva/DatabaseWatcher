<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateProcedureDequeueMessage" xml:space="preserve">
    <value>CREATE OR REPLACE PROCEDURE DEQ_{0} (p_recordset OUT SYS_REFCURSOR) 
AS 
  payload TYPE_{0};
  payload_table TBL_{0};
  v_msgid RAW(16);
  
  queueopts DBMS_AQ.DEQUEUE_OPTIONS_T;
  msgprops DBMS_AQ.MESSAGE_PROPERTIES_T;
   
  no_messages EXCEPTION;
  PRAGMA EXCEPTION_INIT (no_messages, -25228);
BEGIN
  queueopts.wait := {1};
  queueopts.navigation := DBMS_AQ.NEXT_MESSAGE;
  payload_table := TBL_{0}();
  
  FOR Lcntr IN 1..{2} LOOP
    BEGIN
    
      payload_table.EXTEND;
      
      DBMS_AQ.DEQUEUE ('QUE_{0}', queueopts, msgprops, payload, v_msgid);
      payload_table(payload_table.LAST) := payload;
      
      queueopts.wait := DBMS_AQ.NO_WAIT;

    EXCEPTION
      WHEN no_messages THEN
        OPEN p_recordset FOR SELECT NULL AS message_type, NULL AS message FROM DUAL;
        RETURN;
    END;
  END LOOP;
   
  OPEN p_recordset FOR SELECT message_type, message FROM TABLE(payload_table);     
END;</value>
  </data>
  <data name="CreateTriggerEnqueueMessage" xml:space="preserve">
    <value>CREATE OR REPLACE TRIGGER TR_{0}
AFTER {15}{1} ON {2}
REFERENCING OLD AS OLD NEW AS NEW 
FOR EACH ROW
BEGIN
  DECLARE
    enqueue_options DBMS_AQ.enqueue_options_t;
    message_properties DBMS_AQ.message_properties_t;
    message_handle RAW(16);
    message_buffer BLOB;
    message_content TYPE_{0};
    lob_loc BLOB;
    l_clob CLOB;    
    messageEnd VARCHAR2(50) := '{6}';
    messageStart VARCHAR2(50);
    dmlType VARCHAR2(50);

    l_dest_offset integer;
    l_src_offset  integer;
    l_csid integer;
    l_ctx integer;
    l_warn integer;

    {7}
    
  BEGIN
    enqueue_options.visibility := DBMS_AQ.ON_COMMIT;
     
    IF INSERTING THEN
      dmlType := '{8}';
      messageStart := '{3}';
      {9}
    ELSIF UPDATING THEN
      IF {16} THEN 
            RETURN;      
      ELSE
            dmlType := '{10}';
            messageStart := '{4}';
            {11}    
      END IF;
    ELSIF DELETING THEN 
      dmlType := '{12}';
      messageStart := '{5}';
      {13}
    END IF;
       
    {14}
    
  END;
END;</value>
  </data>
  <data name="ScriptDropAll" xml:space="preserve">
    <value>BEGIN
    DECLARE
      v_object_type2 VARCHAR2(30);
    BEGIN
      SELECT   OBJECT_TYPE 
      INTO     v_object_type2 
      FROM     user_OBJECTS 
      WHERE    OBJECT_TYPE = 'TRIGGER' AND UPPER(OBJECT_NAME) = 'TR_{0}';

      EXECUTE IMMEDIATE 'DROP TRIGGER TR_{0}';
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    DECLARE
      v_object_type3 VARCHAR2(30);
    BEGIN
      SELECT   OBJECT_TYPE 
      INTO     v_object_type3 
      FROM     user_OBJECTS 
      WHERE    OBJECT_TYPE = 'PROCEDURE' AND UPPER(OBJECT_NAME) = 'DEQ_{0}';

      EXECUTE IMMEDIATE 'DROP PROCEDURE DEQ_{0}';
    EXCEPTION
    WHEN OTHERS THEN
      NULL;
    END;

    DECLARE
      v_object_type4 VARCHAR2(30);
    BEGIN
      SELECT   OBJECT_TYPE 
      INTO     v_object_type4 
      FROM     user_OBJECTS 
      WHERE    OBJECT_TYPE = 'QUEUE' AND UPPER(OBJECT_NAME) = 'QUE_{0}';

      DBMS_AQADM.STOP_QUEUE('QUE_{0}'); 
      DBMS_AQADM.DROP_QUEUE(queue_name =&gt; 'QUE_{0}');
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;

    DECLARE
      v_object_type5 VARCHAR2(30);
    BEGIN
      SELECT   OBJECT_TYPE 
      INTO     v_object_type5 
      FROM     user_OBJECTS 
      WHERE    OBJECT_TYPE = 'TABLE' AND UPPER(OBJECT_NAME) = 'QT_{0}';

      DBMS_AQADM.DROP_QUEUE_TABLE(queue_table =&gt; 'QT_{0}', force =&gt; TRUE); 
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
    
    DECLARE
      v_object_type VARCHAR2(30);
    BEGIN
      SELECT   OBJECT_TYPE 
      INTO     v_object_type
      FROM     user_OBJECTS 
      WHERE    OBJECT_TYPE = 'TYPE' AND UPPER(OBJECT_NAME) = 'TBL_{0}';

      EXECUTE IMMEDIATE 'DROP TYPE TBL_{0}';
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;    
    
    DECLARE
      v_object_type6 VARCHAR2(30);
    BEGIN
      SELECT   OBJECT_TYPE 
      INTO     v_object_type6
      FROM     user_OBJECTS 
      WHERE    OBJECT_TYPE = 'TYPE' AND UPPER(OBJECT_NAME) = 'TYPE_{0}';

      EXECUTE IMMEDIATE 'DROP TYPE TYPE_{0}';
    EXCEPTION
      WHEN OTHERS THEN
        NULL;
    END;
END;</value>
  </data>
  <data name="ScriptJobCreate" xml:space="preserve">
    <value>BEGIN
  DBMS_SCHEDULER.CREATE_JOB(
    JOB_NAME =&gt; 'JOB_{0}',
    JOB_TYPE =&gt; 'PLSQL_BLOCK',
    JOB_ACTION =&gt; '{2}',
    START_DATE =&gt; SYSTIMESTAMP + INTERVAL '{1}' MINUTE,
    END_DATE =&gt; NULL,
    ENABLED =&gt; FALSE,
    AUTO_DROP =&gt; TRUE);
  
  DBMS_SCHEDULER.SET_ATTRIBUTE(
    NAME =&gt; 'JOB_{0}', 
    ATTRIBUTE =&gt; 'restartable', 
    VALUE =&gt; TRUE);
END;</value>
  </data>
</root>